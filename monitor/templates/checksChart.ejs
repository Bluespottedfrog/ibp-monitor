<%
healthChecks.reverse()
const data = healthChecks.map(hc => hc.record?.performance || 0)
console.log('length', data.length)
const labels = healthChecks.map(hc => moment.utc(hc.createdAt).format('HH:mm') || 0)
const period = 3.0
var moveMean = [];
for (var i = 0; i < data.length; i++) {
  if (i === 0) {
    moveMean.push(data[i])
  } else if( i === 1 ) {
    var mean = (data[i-1] + data[i-1] + data[i])/period;
    moveMean.push([mean]);
  } else  {
    var mean = (data[i-2] + data[i-1] + data[i])/period;
    moveMean.push([mean]);
  }
}
healthChecks.reverse() // put it back!
%>

<div class="columns">
  <div class="column is-1 is-narrow-mobile"></div>
  <div class="column">
    <div class="is-fullwidth">
      <canvas id="myChart"></canvas>
    </div>
  </div>
  <div class="column is-1 is-narrow-mobile"></div>
</div>

<script>
  const ctx = document.getElementById('myChart');

  new Chart(ctx, {
    type: 'line',
    data: {
      // labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
      labels: <%-JSON.stringify(labels) %>,
      datasets: [{
        label: 'Service performance (ms)',
        // data: [12, 19, 3, 5, 2, 3],
        data: <%- JSON.stringify(data) %>,
        borderColor: 'darkblue',
        backgroundColor: 'blue',
        borderWidth: 2,
        lineTension: 0.2,
        // options: {
        //   elements: {
        //     line: {
        //       tension : 0.4  // smooth lines
        //     },
        //   }
        // },
      }, {
        label: 'Moving Average',
        data: <%- JSON.stringify(moveMean) %>,
        borderColor: 'darkgreen',
        backgroundColor: 'green',
        borderWidth: 1,
        lineTension: 0.4,
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
</script>
